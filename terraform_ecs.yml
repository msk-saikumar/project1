# Define AWS provider
provider "aws" {
  region = "us-west-2"
}

# Create an ECS cluster
resource "aws_ecs_cluster" "my_cluster" {
  name = "my-cluster"
}

# Create a task definition for the container
resource "aws_ecs_task_definition" "my_task" {
  family                   = "my-task"
  container_definitions    = <<DEFINITION
[
  {
    "name": "my-container",
    "image": "nginx:latest",
    "portMappings": [
      {
        "containerPort": 80,
        "hostPort": 80,
        "protocol": "tcp"
      }
    ]
  }
]
DEFINITION
}

# Create a service to run the task on the cluster
resource "aws_ecs_service" "my_service" {
  name            = "my-service"
  cluster         = aws_ecs_cluster.my_cluster.id
  task_definition = aws_ecs_task_definition.my_task.arn

  desired_count   = 1
  launch_type     = "FARGATE"

  network_configuration {
    security_groups = [aws_security_group.my_sg.id]
    subnets         = [aws_subnet.my_subnet.id]
  }

  load_balancer {
    target_group_arn = aws_lb_target_group.my_target_group.arn
    container_name   = "my-container"
    container_port   = 80
  }
}

# Create a security group for the service
resource "aws_security_group" "my_sg" {
  name_prefix = "my-sg"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create a subnet for the service
resource "aws_subnet" "my_subnet" {
  cidr_block = "10.0.1.0/24"
}

# Create a target group for the service
resource "aws_lb_target_group" "my_target_group" {
  name_prefix = "my-target-group"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = aws_vpc.my_vpc.id
}

# Create a VPC for the service
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"
}
